package airline.reservation.system;

//Import Statements
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class FlightDetailsGUI extends javax.swing.JFrame {
    // Collection to store Flight objects representing flight details in FlightDetailsGUI.
    public ArrayList<Flight> flights;

     /**
     * Default constructor for FlightDetailsGUI.
     * Initializes the components, sets up table header appearance, applies custom table cell rendering,
     * and loads flight details from the database.
     */
    public FlightDetailsGUI() {
        initComponents();
        initializeComponents();
        setupTableHeader();
        setupTableRenderer();
        loadFlightDetailsFromDatabase();
    }

    /**
     * Initializes components, such as creating an ArrayList for flights and setting the window location.
     */
    private void initializeComponents() {
        this.flights = new ArrayList<>();
        setLocationRelativeTo(null);
    }

    /**
     * Sets up the appearance of the table header with a specified background color, text color, and font.
     */
    private void setupTableHeader() {
        flightDetailsTable.getTableHeader().setBackground(new Color(112, 48, 160));
        flightDetailsTable.getTableHeader().setForeground(Color.WHITE);
        flightDetailsTable.getTableHeader().setFont(new Font("Segoe", Font.BOLD, 12));
    }

    /**
     * Applies a custom cell renderer to center the data in all columns of the flight details table.
     */
    private void setupTableRenderer() {
        // Creating a custom cell renderer to center the data
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Applying the custom renderer to all columns
        for (int i = 0; i < flightDetailsTable.getColumnCount(); i++) {
            flightDetailsTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    /**
     * Retrieves and loads flight details from the database into the flight details table.
     */
    private void loadFlightDetailsFromDatabase() {
        try {
            // Get a connection from the DatabaseHandler
            Connection connection = DatabaseHandler.getConnection();
            String query = "SELECT FlightID, Source, Destination, Date, DepartureTime, PlaneID, ModelName FROM flights";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            ResultSetMetaData metaData = resultSet.getMetaData();
            int numberOfColumns = metaData.getColumnCount();
            DefaultTableModel defaultTableModel = (DefaultTableModel) flightDetailsTable.getModel();
            defaultTableModel.setRowCount(0);

            // Populate the table with flight details retrieved from the database
            while (resultSet.next()) {
                Vector<Object> rowData = new Vector<>();
                for (int i = 1; i <= numberOfColumns; i++) {
                    rowData.add(resultSet.getString(i));
                }
                defaultTableModel.addRow(rowData);
            }

            // Close the database connection using the DatabaseHandler
            DatabaseHandler.closeConnection(connection);

        } catch (SQLException ex) {
            //Handle SQL-related exceptions
            Logger.getLogger(AirlineReservation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flightDetailsPanel = new javax.swing.JPanel();
        destinationSelectionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sourceComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        destinationComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightDetailsTable = new javax.swing.JTable();
        reserveTicketButton = new javax.swing.JButton();
        viewCartButton = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flight Details ");
        setName("FlightDetailsFrame"); // NOI18N
        setResizable(false);

        flightDetailsPanel.setBackground(new java.awt.Color(249, 249, 255));

        destinationSelectionPanel.setBackground(new java.awt.Color(229, 229, 255));
        destinationSelectionPanel.setBorder(new javax.swing.border.MatteBorder(null));
        destinationSelectionPanel.setForeground(new java.awt.Color(102, 0, 153));

        jLabel1.setText("Source :");

        sourceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Colombo" }));
        sourceComboBox.setBorder(null);
        sourceComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel2.setText("Destination : ");

        destinationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canberra", "Dhaka", "Beijing", "New Delhi", "Jakarta", "Kuala Lumpur", "Male", "Islamabad", "Bangkok", "Singapore", "All" }));
        destinationComboBox.setBorder(null);

        searchButton.setBackground(new java.awt.Color(112, 48, 160));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchButtonMouseExited(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout destinationSelectionPanelLayout = new javax.swing.GroupLayout(destinationSelectionPanel);
        destinationSelectionPanel.setLayout(destinationSelectionPanelLayout);
        destinationSelectionPanelLayout.setHorizontalGroup(
            destinationSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationSelectionPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        destinationSelectionPanelLayout.setVerticalGroup(
            destinationSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationSelectionPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(destinationSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(destinationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        flightDetailsTable.setAutoCreateRowSorter(true);
        flightDetailsTable.setBackground(new java.awt.Color(247, 247, 255));
        flightDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Flight ID", "Source", "Destination ", "Date", "Departure Time", "Plane ID", "Model Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        flightDetailsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        flightDetailsTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        flightDetailsTable.setShowGrid(true);
        jScrollPane1.setViewportView(flightDetailsTable);
        if (flightDetailsTable.getColumnModel().getColumnCount() > 0) {
            flightDetailsTable.getColumnModel().getColumn(0).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(1).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(2).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(3).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(4).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(5).setResizable(false);
            flightDetailsTable.getColumnModel().getColumn(6).setResizable(false);
        }

        reserveTicketButton.setBackground(new java.awt.Color(112, 48, 160));
        reserveTicketButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        reserveTicketButton.setForeground(new java.awt.Color(255, 255, 255));
        reserveTicketButton.setText("Book Ticket ");
        reserveTicketButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reserveTicketButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                reserveTicketButtonMouseExited(evt);
            }
        });
        reserveTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveTicketButtonActionPerformed(evt);
            }
        });

        viewCartButton.setBackground(new java.awt.Color(112, 48, 160));
        viewCartButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewCartButton.setForeground(new java.awt.Color(255, 255, 255));
        viewCartButton.setText("View Cart");
        viewCartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                viewCartButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                viewCartButtonMouseExited(evt);
            }
        });
        viewCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCartButtonActionPerformed(evt);
            }
        });

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-plane-96 (1).png"))); // NOI18N

        exitButton.setBackground(new java.awt.Color(204, 0, 153));
        exitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setText("Exit");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitButtonMouseExited(evt);
            }
        });
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout flightDetailsPanelLayout = new javax.swing.GroupLayout(flightDetailsPanel);
        flightDetailsPanel.setLayout(flightDetailsPanelLayout);
        flightDetailsPanelLayout.setHorizontalGroup(
            flightDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightDetailsPanelLayout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(reserveTicketButton)
                .addGap(63, 63, 63)
                .addComponent(viewCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flightDetailsPanelLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(flightDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flightDetailsPanelLayout.createSequentialGroup()
                        .addComponent(logo)
                        .addGap(32, 32, 32)
                        .addComponent(destinationSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flightDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))))
        );
        flightDetailsPanelLayout.setVerticalGroup(
            flightDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightDetailsPanelLayout.createSequentialGroup()
                .addGroup(flightDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(flightDetailsPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(destinationSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(flightDetailsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(flightDetailsPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(flightDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveTicketButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(flightDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(flightDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Handles the action when the searchButton is clicked.
    * Retrieves the selected country from the destinationComboBox,
    * filters the flightDetailsTable based on the selected country using RowFilter.
    * If "All" is selected, the table is reset to its original state.
    */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Get the selected country from the destinationComboBox
         String selectedCountry = destinationComboBox.getSelectedItem().toString();
         
         // Get the default table model of the flightDetailsTable
         DefaultTableModel default_table = (DefaultTableModel) flightDetailsTable.getModel();
         
         // Create a TableRowSorter and set it to the flightDetailsTable
         TableRowSorter<DefaultTableModel> table_row = new TableRowSorter<DefaultTableModel>(default_table);
         flightDetailsTable.setRowSorter(table_row);
         
         // Apply a RowFilter based on the selected country, or reset the table if "All" is selected
         if(!"All".equals(selectedCountry)){
             table_row.setRowFilter(RowFilter.regexFilter(selectedCountry));
        }else{
             flightDetailsTable.setRowSorter(table_row);
         }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
    * Handles the action when the reserveTicketButton is clicked.
    * Retrieves selected rows from the flightDetailsTable, gets additional flight information,
    * saves the selected flight details to a user session file, and displays a success message.
    */
    private void reserveTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveTicketButtonActionPerformed
        // Get the table model and selected rows from the flightDetailsTable
        TableModel model = flightDetailsTable.getModel();
        int[] selectedRows = flightDetailsTable.getSelectedRows();

        // Get the RowSorter to convert view indices to model indices
        RowSorter<? extends TableModel> sorter = flightDetailsTable.getRowSorter();
        
        // Iterate through the selected rows
        for (int i = 0; i < selectedRows.length; i++) {
            
            // Convert the view index to model index
            int modelIndex = sorter.convertRowIndexToModel(selectedRows[i]);

            // Create an object array to store the selected flight details
            Object[] row = new Object[6];

            // Populate the array with data from the selected rows in the table model
            for (int j = 0; j < 5; j++) {
                row[j] = model.getValueAt(modelIndex, j);
            }

            // Get flight ID and retrieve available seats from the database
            String flightID = model.getValueAt(selectedRows[i], 0).toString();
            int availableSeats = getAvailableSeats(flightID);

            // Set the available seats value in the last column
            row[5] = availableSeats;

            // Save the selected flight details to the user session file
            saveToUserSessionFile(row);

            // Display a success message
            JOptionPane.showMessageDialog(this, "Added to the cart successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } 
    }//GEN-LAST:event_reserveTicketButtonActionPerformed
    
    /**
     * Retrieves available seats for a given flight ID from the database.
     *
     * @param flightID The ID of the flight to retrieve available seats.
     * @return The number of available seats for the specified flight.
     */
    private int getAvailableSeats(String flightID) {
        int availableSeats = 0;  // Initialize with a default value
        try {
            // Get a connection from the DatabaseHandler
            Connection connection = DatabaseHandler.getConnection();
            PreparedStatement statement = connection.prepareStatement("SELECT NumberOfSeats FROM flights WHERE FlightID=?");
            statement.setString(1, flightID);
            ResultSet resultSet = statement.executeQuery();

            // Check if the result set has a valid row
            if (resultSet.next()) {
                availableSeats = resultSet.getInt("NumberOfSeats");
            }

            // Close the ResultSet, PreparedStatement, and Connection
            resultSet.close();
            statement.close();
            // Close the database connection using the DatabaseHandler
            DatabaseHandler.closeConnection(connection);
        } catch (SQLException ex) {
            Logger.getLogger(AirlineReservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return availableSeats;
    }

    /**
     * Saves the selected flight details to the user session file.
     *
     * @param row The array containing the selected flight details.
     */
    private void saveToUserSessionFile(Object[] row) {
        String fileName = "user_session.txt";
        // Save the row object array to the user session file
        try (PrintWriter writer = new PrintWriter(new FileWriter(fileName, true))) {
            for (Object element : row) {
                writer.print(element + ", ");
            }
            writer.println(); // Move to the next line for the next row
        } catch (IOException ex) {
            System.out.println(ex.getMessage()); // Handle the exception appropriately
        }
    }
    
    public void loadFromFile() {
        try {
             // Open the file for reading
            File read_file = new File("user_session.txt");
            Scanner myReader = new Scanner(read_file);

            // Read each line in the file
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                String[] parts = data.split(", ");

                 // Ensure all parts are present
                if (parts.length == 6) {
                    String flightId = parts[0];
                    String source = parts[1];
                    String destination = parts[2];
                    String date = parts[3];
                    String time = parts[4];
                    int noOfSeats = Integer.parseInt(parts[5]);

                    // Create Flight object
                    Flight flight = new Flight(flightId, source, destination, date, time, noOfSeats);

                    // Add the Flight object to the ArrayList
                    flights.add(flight);
                }
            }

            // Close the file reader
            myReader.close();
        } catch (FileNotFoundException e) {
            //System.out.println("An error occurred while loading flights from the file.");
            //System.out.println(e.getMessage());
        }
    }

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseEntered
        //Changes the background color of the searchButton when the mouse enters.
        searchButton.setBackground(new Color(137,59,195));
    }//GEN-LAST:event_searchButtonMouseEntered

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseExited
        //Resets the background color of the searchButton when the mouse exits.
        searchButton.setBackground(new Color(112,48,160));
    }//GEN-LAST:event_searchButtonMouseExited

    private void reserveTicketButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reserveTicketButtonMouseEntered
        // Changes the background color of the reserveTicketButton when the mouse enters.
        reserveTicketButton.setBackground(new Color(137,59,195));
    }//GEN-LAST:event_reserveTicketButtonMouseEntered

    private void reserveTicketButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reserveTicketButtonMouseExited
       //Resets the background color of the reserveTicketButton when the mouse exits
        reserveTicketButton.setBackground(new Color(112,48,160));
    }//GEN-LAST:event_reserveTicketButtonMouseExited

    private void viewCartButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewCartButtonMouseEntered
        //Changes the background color of the viewCartButton when the mouse enters.
        viewCartButton.setBackground(new Color(137,59,195));
    }//GEN-LAST:event_viewCartButtonMouseEntered

    private void viewCartButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewCartButtonMouseExited
        //Resets the background color of the viewCartButton when the mouse exits.
        viewCartButton.setBackground(new Color(112,48,160));
    }//GEN-LAST:event_viewCartButtonMouseExited

    private void viewCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCartButtonActionPerformed
        //Opens the ViewCartGUI when the viewCartButton is clicked.
        ViewCartGUI viewCartGUI = new ViewCartGUI();
        viewCartGUI.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_viewCartButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
         // Show a confirmation dialog with "Yes" and "No" options
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit Confirmation", JOptionPane.YES_NO_OPTION);
    
        // If the user selects "Yes"
        if (result == JOptionPane.YES_OPTION) {
        // Delete user_session.txt if it exists
        String userSessionFileName = "user_session.txt";
        File userSessionFile = new File(userSessionFileName);

        if (userSessionFile.exists()) {
            userSessionFile.delete();
        } 

        // Delete credentials.txt if it exists
        String credentialsFileName = "credentials.txt";
        File credentialsFile = new File(credentialsFileName);

        if (credentialsFile.exists()) {
            credentialsFile.delete();
        } 

        // Exit the application
        System.exit(0);
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void exitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseEntered
        //Changes the background color of the exitButton when the mouse enters
        exitButton.setBackground(new Color(204,51,153));
    }//GEN-LAST:event_exitButtonMouseEntered

    private void exitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseExited
       //Resets the background color of the exitButton when the mouse exits.
        exitButton.setBackground(new Color(204,0,153));
    }//GEN-LAST:event_exitButtonMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> destinationComboBox;
    private javax.swing.JPanel destinationSelectionPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel flightDetailsPanel;
    private javax.swing.JTable flightDetailsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo;
    private javax.swing.JButton reserveTicketButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> sourceComboBox;
    private javax.swing.JButton viewCartButton;
    // End of variables declaration//GEN-END:variables
}
